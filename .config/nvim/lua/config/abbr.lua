vim.cmd("cnoreabbrev q1  q!")
vim.cmd("cnoreabbrev Q1  q!")
vim.cmd("cnoreabbrev Qa1 qa!")
vim.cmd("cnoreabbrev Qa qa")
vim.cmd("cnoreabbrev W  w")
vim.cmd("cnoreabbrev Wq wq")
vim.cmd("cnoreabbrev WQ wq")
vim.cmd("cnoreabbrev Set set")
vim.cmd("cnoreabbrev SEt set")
vim.cmd("cnoreabbrev SET set")
local i_abbreviations = {
  ["teh"] = "the",
  ["thier"] = "their",
  ["theree"] = "there",
  ["hte"] = "the",
  ["taht"] = "that",
  ["fucntion"] = "function",
  ["funcion"] = "function",
  ["fnction"] = "function",
  ["whlie"] = "while",
  ["whie"] = "while",
  ["ragen"] = "range",
  ["ragne"] = 'range',
  ["whiel"] = "while",
  ["iff"] = "if",
  ["iif"] = "if",
  ["returrn"] = "return",
  ["retunr"] = "return",
  ["retuen"] = "return",
  ["retun"] = "return",
  ["forr"] = "for",
  ["fore"] = "for",
  ["foreeach"] = "foreach", -- Or "for each" depending on language
  ["froe"] = "for",
  ["wirte"] = "write",
  ["wrtie"] = "write",
  ["wirting"] = "writing",
  ["writting"] = "writing",
  ["varibale"] = "variable",
  ["varaible"] = "variable",
  ["vairable"] = "variable",
  ["varaibel"] = "variable",
  ["arguement"] = "argument",
  ["arguemnt"] = "argument",
  ["paramter"] = "parameter",
  ["paramater"] = "parameter",
  ["parmater"] = "parameter",
  ["paraemter"] = "parameter",
  ["classs"] = "class",
  ["claass"] = "class",
  ["pulic"] = "public",
  ["pubilc"] = "public",
  ["priavte"] = "private",
  ["provate"] = "private",
  ["privte"] = "private",
  ["protcted"] = "protected",
  ["protecte"] = "protected",
  ["stattic"] = "static",
  ["sttaic"] = "static",
  ["sattic"] = "static",
  ["voiid"] = "void",
  ["viod"] = "void",
  ["innt"] = "int",
  ["itn"] = "int",
  ["bolean"] = "boolean",
  ["booelan"] = "boolean",
  ["boolena"] = "boolean",
  ["bollean"] = "boolean",
  ["sting"] = "string",
  ["stirng"] = "string",
  ["strnig"] = "string",
  ["srting"] = "string",
  ["flooat"] = "float",
  ["flot"] = "float",
  ["fltoa"] = "float",
  ["doblue"] = "double",
  ["doubel"] = "double",
  ["doubule"] = "double",
  ["charachter"] = "character",
  ["cahracter"] = "character",
  ["charater"] = "character",
  ["arary"] = "array",
  ["arrya"] = "array",
  ["aray"] = "array",
  ["lenght"] = "length",
  ["lengh"] = "length",
  ["lengt"] = "length",
  ["objct"] = "object",
  ["obejct"] = "object",
  ["obect"] = "object",
  ["instnace"] = "instance",
  ["isntance"] = "instance",
  ["instace"] = "instance",
  ["methoid"] = "method",
  ["methodd"] = "method",
  ["metohd"] = "method",
  ["constuctor"] = "constructor",
  ["consturctor"] = "constructor",
  ["constrcutor"] = "constructor",
  ["excetpion"] = "exception",
  ["exceptoin"] = "exception",
  ["exeption"] = "exception",
  ["impelement"] = "implement",
  ["implemetn"] = "implement",
  ["implemnt"] = "implement",
  ["fro"] = "for",
  ["elise"] = "else",
  ["esle"] = "else",
  ["eles"] = "else",
  ["rti"] = "rti", -- Example: you often mistype 'return' as 'rti', but actually want 'rti' (interrupt). So no correction here
  ["retrun"] = "return",
  ["brek"] = "break",
  ["berak"] = "break",
  ["brake"] = "break",
  ["contiune"] = "continue",
  ["contineu"] = "continue",
  ["contniue"] = "continue",
  ["swith"] = "switch",
  ["swtich"] = "switch",
  ["swicth"] = "switch",
  ["caes"] = "case",
  ["casae"] = "case",
  ["defualt"] = "default",
  ["defalut"] = "default",
  ["defautl"] = "default",
  ["dobule"] = "double",
  ["doulbe"] = "double",
  ["inut"] = "input",
  ["inpt"] = "input",
  ["ouptut"] = "output",
  ["ouput"] = "output",
  ["prnt"] = "print",
  ["pirnt"] = "print",
  ["pritn"] = "print",
  ["const"] = "const",
  ["cons"] = "const",
  ["cunt"] = "count",
  ["cnout"] = "count",
  ["nuull"] = "null",
  ["nnull"] = "null",
  ["undefiend"] = "undefined",
  ["undefinde"] = "undefined",
  ["undefine"] = "undefined",
  ["tru"] = "true",
  ["ture"] = "true",
  ["flase"] = "false",
  ["fasle"] = "false",
}

for typo, correction in pairs(i_abbreviations) do
  vim.cmd(":" .. "ab " .. typo .. " " .. correction) -- Execute the abbreviation command
end
